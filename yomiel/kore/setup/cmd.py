# -*- coding: utf-8 -*-
#
# jomiel-kore
#
# Copyright
#  2019 Toni Gündoğdu
#
#
# SPDX-License-Identifier: Apache-2.0
#
"""TODO."""

from distutils.command.clean import clean

from setuptools.command.build_py import build_py
from setuptools.command.sdist import sdist
from wheel.bdist_wheel import bdist_wheel

from .cache import PROTO_INIT


class CustomCommand__sdist(sdist):
    """Custom command for setup target sdist."""

    def run(self):
        """run"""
        self.run_command("build_py")
        return sdist.run(self)


class CustomCommand__bdist_wheel(bdist_wheel):
    """Custom command for setup target bdist_wheel."""

    def run(self):
        """run"""
        self.run_command("build_py")
        return bdist_wheel.run(self)


class CustomCommand__build_py(build_py):
    """Custom command for setup target build_py."""

    def run(self):
        """run"""
        from .proto import generate_protobuf_bindings
        from .version import save_version_file
        from .file import touch_file

        generate_protobuf_bindings()
        touch_file(PROTO_INIT)
        save_version_file()

        return build_py.run(self)


class CustomCommand__clean(clean):
    """Custom command for setup target clean."""

    def run(self):
        """run"""
        from .cache import (
            PROTO_FILES,
            VERSION_FILE,
        )

        # Proto files
        #
        def proto_binding_files():
            """Return the list containing the generated *_pb2.py files."""
            from os.path import splitext, join, dirname, basename

            result = []
            for proto_file in PROTO_FILES:
                path = dirname(proto_file)
                name = basename(proto_file)
                (prefix, _) = splitext(name)
                result.append(join(path, prefix + "_pb2.py"))
            return result

        files = proto_binding_files()
        files.append(PROTO_INIT)

        # Other files (generated by us)
        #
        files.append(VERSION_FILE)

        from distutils.debug import DEBUG
        from ..file import unlink_if

        for _file in files:
            unlink_if(_file, verbose=DEBUG)

        def clean_all():
            """If --all was given with `setup.py clean`.

            Remove all that we don't need that setuptools left behind
            after running `setup.py clean --all`.

            To get inspired, see:
                https://blog.ionelmc.ro/2014/06/25/python-packaging-pitfalls/

            """
            from distutils.dir_util import remove_tree
            from os.path import isdir

            def rmtree_if(dirname):
                """Remove tree conditionally."""
                if isdir(dirname):
                    remove_tree(dirname)

            from .cache import PKG_NAME

            dirs = [
                PKG_NAME + ".egg-info",
                "build",
            ]

            for _dir in dirs:
                rmtree_if(_dir)

        rval = clean.run(self)  # Run the default handler first

        if self.all:
            clean_all()

        return rval


# vim: set ts=4 sw=4 tw=72 expandtab:
